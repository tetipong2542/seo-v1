import { NextRequest, NextResponse } from 'next/server';
import { GoogleAuth } from 'google-auth-library';

export async function POST(request: NextRequest) {
  try {
    const { google_client_email, google_private_key, google_project_id } = await request.json();

    if (!google_client_email || !google_private_key || !google_project_id) {
      return NextResponse.json(
        { success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google APIs configuration ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' },
        { status: 400 }
      );
    }

    // Validate service account format
    if (!google_client_email.includes('@') || !google_client_email.includes('.iam.gserviceaccount.com')) {
      return NextResponse.json(
        { success: false, message: 'Google Client Email ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Service Account Email' },
        { status: 400 }
      );
    }

    // Validate private key format
    if (!google_private_key.includes('BEGIN PRIVATE KEY') || !google_private_key.includes('END PRIVATE KEY')) {
      return NextResponse.json(
        { success: false, message: 'Google Private Key ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 400 }
      );
    }

    console.log('üîê Testing Google APIs authentication...');
    console.log('Project ID:', google_project_id);
    console.log('Service Account:', google_client_email);

    // Create auth client
    const auth = new GoogleAuth({
      credentials: {
        client_email: google_client_email,
        private_key: google_private_key.replace(/\\n/g, '\n'),
        project_id: google_project_id,
      },
      scopes: [
        'https://www.googleapis.com/auth/documents',
        'https://www.googleapis.com/auth/drive.file',
      ],
    });

    // Test authentication by getting access token
    console.log('üéØ Getting access token...');
    const authClient = await auth.getClient();
    const accessToken = await authClient.getAccessToken();

    if (!accessToken.token) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Access Token');
    }

    console.log('‚úÖ Access token received successfully');

    // Test creating a document directly (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å endpoint ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ)
    console.log('üìù Testing document creation...');
    const testResponse = await fetch('https://docs.googleapis.com/v1/documents', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken.token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title: 'SEO Generator Test Document - ' + new Date().toISOString(),
      }),
    });

    if (!testResponse.ok) {
      const errorData = await testResponse.text();
      console.error('‚ùå Document Creation Error:', testResponse.status, errorData);
      
      if (testResponse.status === 403) {
        return NextResponse.json({
          success: false,
          message: `‚ùå Google Docs API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Google Cloud Console
2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project: ${google_project_id}
3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà "APIs & Services" > "Library"
4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î "Google Docs API"
5. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î "Google Drive API"

üîó Link: https://console.cloud.google.com/apis/library?project=${google_project_id}`
        });
      } else if (testResponse.status === 401) {
        return NextResponse.json({
          success: false,
          message: `‚ùå ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
- Private Key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ \\n ‡∏à‡∏£‡∏¥‡∏á‡πÜ)
- Service Account Email ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
- Project ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`
        });
      } else {
        throw new Error(`Document Creation Error: ${testResponse.status} - ${errorData}`);
      }
    }

    const testDoc = await testResponse.json();
    console.log('‚úÖ Test document created:', testDoc.documentId);

    // Test Google Drive API by deleting the test document
    if (testDoc.documentId) {
      try {
        console.log('üßπ Testing Google Drive API - Cleaning up test document...');
        const deleteResponse = await fetch(`https://www.googleapis.com/drive/v3/files/${testDoc.documentId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${accessToken.token}`,
          },
        });

        if (deleteResponse.ok) {
          console.log('‚úÖ Test document deleted - Google Drive API working');
        } else {
          console.log('‚ö†Ô∏è Could not delete test document, but document creation succeeded');
        }
      } catch (cleanupError) {
        console.log('‚ö†Ô∏è Note: Could not delete test document:', cleanupError);
      }
    }

    return NextResponse.json({
      success: true,
      message: '‚úÖ Google APIs ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Google Docs ‡πÑ‡∏î‡πâ',
      details: {
        project_id: google_project_id,
        service_account: google_client_email,
        test_document_created: testDoc.documentId ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        apis_working: ['Google Docs API', 'Google Drive API'],
        document_id: testDoc.documentId
      }
    });

  } catch (error) {
    console.error('üí• Test Google APIs error:', error);
    
    let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Google APIs';
    
    if (error instanceof Error) {
      if (error.message.includes('invalid_grant')) {
        errorMessage = `‚ùå Google Service Account credentials ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
- Private Key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- Service Account ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
- Project ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
      } else if (error.message.includes('403')) {
        errorMessage = `‚ùå Google APIs ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á

üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google Docs API ‡πÅ‡∏•‡∏∞ Google Drive API
2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Service Account ‡∏°‡∏µ Role ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
3. Link: https://console.cloud.google.com/apis/library`;
      } else if (error.message.includes('401')) {
        errorMessage = `‚ùå ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
- Private Key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ \\n ‡∏à‡∏£‡∏¥‡∏á‡πÜ)
- Service Account Email ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
- Project ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
      } else {
        errorMessage = `‚ùå ${error.message}

üìû ‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
1. Google Cloud Console Project Settings
2. Service Account Keys
3. API Quotas`;
      }
    }
    
    return NextResponse.json(
      { success: false, message: errorMessage },
      { status: 400 }
    );
  }
}

export async function GET() {
  return NextResponse.json(
    { success: false, message: 'Method not allowed. Please use POST.' },
    { status: 405 }
  );
} 