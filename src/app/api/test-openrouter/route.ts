import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { api_key, model } = await request.json();

    console.log('üîß Testing OpenRouter API...');
    console.log('- API Key length:', api_key?.length || 0);
    console.log('- API Key format check:', api_key?.startsWith('sk-or-v1-') || false);
    console.log('- Model:', model || 'deepseek/deepseek-r1-0528-qwen3-8b');

    if (!api_key) {
      console.log('‚ùå No API key provided');
      return NextResponse.json(
        { success: false, message: 'API Key ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏' },
        { status: 400 }
      );
    }

    // Validate API key format
    if (!api_key.startsWith('sk-or-v1-')) {
      console.log('‚ùå Invalid API key format');
      return NextResponse.json(
        { 
          success: false, 
          message: 'API Key ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "sk-or-v1-"' 
        },
        { status: 400 }
      );
    }

    // Check for demo/invalid keys
    const demoKeys = [
      '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',
      'sk-or-v1-test',
      'sk-or-v1-demo',
      'sk-or-v1-example'
    ];

    if (demoKeys.includes(api_key)) {
      console.log('‚ùå Demo API key detected');
      return NextResponse.json(
        { 
          success: false, 
          message: '‚ùå ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Demo API Key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô\n\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà OpenRouter.ai ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á\n\nDemo Key ‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏î‡πâ' 
        },
        { status: 400 }
      );
    }

    const requestBody = {
      model: model || 'deepseek/deepseek-r1-0528-qwen3-8b',
      messages: [
        {
          role: 'user',
          content: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤ "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"'
        }
      ],
      max_tokens: 50,
      temperature: 0.1
    };

    console.log('üì§ Sending request to OpenRouter...');

    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${api_key}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',
        'X-Title': 'SEO Content Generator'
      },
      body: JSON.stringify(requestBody)
    });

    console.log('üìä Response status:', response.status);

    if (!response.ok) {
      const errorData = await response.text();
      console.log('‚ùå API Error:', errorData);
      
      let errorMessage = `OpenRouter API Error: ${response.status}`;
      
      try {
        const errorJson = JSON.parse(errorData);
        if (response.status === 401) {
          errorMessage = `‚ùå API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
          
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
1. API Key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
2. API Key ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà  
3. ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ OpenRouter ‡∏°‡∏µ credits ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

Error: ${errorJson.error?.message || errorData}`;
        } else {
          errorMessage = `${errorMessage} - ${errorJson.error?.message || errorData}`;
        }
      } catch (parseError) {
        errorMessage = `${errorMessage} - ${errorData}`;
      }
      
      return NextResponse.json(
        { success: false, message: errorMessage },
        { status: 400 }
      );
    }

    const data = await response.json();
    console.log('‚úÖ OpenRouter API test successful');
    
    return NextResponse.json({
      success: true,
      message: '‚úÖ OpenRouter API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!',
      response: data.choices?.[0]?.message?.content || '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI',
      usage: data.usage
    });

  } catch (error) {
    console.error('üí• Test OpenRouter error:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${error instanceof Error ? error.message : 'Unknown error'}` 
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json(
    { success: false, message: 'Method not allowed. Please use POST.' },
    { status: 405 }
  );
} 