import axios from 'axios';
import { SEOFormData, OpenRouterResponse, ProcessedResponse, ContentAnalysis, KeywordAnalysis } from '@/types';

const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';

interface OpenRouterConfig {
  apiKey: string;
  model?: string;
}

export async function generateSEOContent(
  data: SEOFormData, 
  config?: OpenRouterConfig
): Promise<ProcessedResponse> {
  try {
    let apiKey: string;
    let model: string;

    if (config) {
      // Use provided config (for API calls)
      apiKey = config.apiKey;
      model = config.model || 'deepseek/deepseek-r1-0528-qwen3-8b';
    } else {
      // Fallback to IndexedDB (for client-side calls)
      const { indexedDBService } = await import('@/lib/indexeddb');
      console.log('Getting settings from IndexedDB...');
      const settings = await indexedDBService.getSettings();
      
      if (!settings) {
        console.error('No settings found in IndexedDB');
        return {
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenRouter API ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Settings ‡∏Å‡πà‡∏≠‡∏ô'
        };
      }
      
      apiKey = settings.openrouter_api_key;
      model = settings.openrouter_model || 'deepseek/deepseek-r1-0528-qwen3-8b';
    }
    
    if (!apiKey) {
      console.error('OpenRouter API key not found');
      return {
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà OpenRouter API Key ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Settings'
      };
    }
    
    if (!apiKey.startsWith('sk-or-v1-')) {
      console.error('Invalid OpenRouter API key format');
      return {
        success: false,
        message: 'OpenRouter API Key ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      };
    }
    
    console.log('API Key found and format is correct');
    console.log('Using model:', model);
    
    const systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô SEO ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ SEO ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á keywords ‡πÅ‡∏•‡∏∞ internal links ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î 100% ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô";

    // Generate content with retry mechanism
    let currentContent = '';
    let attempts = 0;
    const maxAttempts = 3;
    let validationResult;

    while (attempts < maxAttempts) {
      attempts++;
      console.log(`üîÑ Attempt ${attempts}/${maxAttempts} to generate valid content`);

      // Format keywords and links with more detailed instructions
      const keywordsLinksText = data.keywords_links
        .map((item, index) => `${index + 1}. ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: "${item.keyword}" ‡πÉ‡∏ä‡πâ ${item.frequency} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô Internal Link: ${item.link}`)
        .join('\n');

      // Calculate total keyword usage for verification
      const totalKeywordUsage = data.keywords_links.reduce((total, item) => total + item.frequency, 0);
      const keywordList = data.keywords_links.map(item => `"${item.keyword}"`).join(', ');

      // Content length mapping with detailed word counts
      const contentLengthMap: Record<string, { description: string, wordCount: string, tokens: number }> = {
        short: { 
          description: '‡∏™‡∏±‡πâ‡∏ô (800-1,200 ‡∏Ñ‡∏≥)', 
          wordCount: '800-1,200 ‡∏Ñ‡∏≥',
          tokens: 3000 
        },
        medium: { 
          description: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (1,500-2,000 ‡∏Ñ‡∏≥)', 
          wordCount: '1,500-2,000 ‡∏Ñ‡∏≥',
          tokens: 4500 
        },
        long: { 
          description: '‡∏¢‡∏≤‡∏ß (2,500-3,500 ‡∏Ñ‡∏≥)', 
          wordCount: '2,500-3,500 ‡∏Ñ‡∏≥',
          tokens: 6000 
        }
      };

      const contentLength = contentLengthMap[data.content_length] || contentLengthMap.medium;
      
      let userPrompt = '';
      
      if (attempts === 1) {
        // First attempt - create new content
        userPrompt = `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ SEO Onpage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: ${data.website_name}

‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: ${data.website_description}

‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${data.page_title}

üìã **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Keywords ‡πÅ‡∏•‡∏∞ Internal Links ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:**
${keywordsLinksText}

**üö® ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ 100%:**
**‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Keywords:** ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalKeywordUsage} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ${keywordList}
**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Internal Links:** ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ${data.keywords_links.length} ‡∏•‡∏¥‡∏á‡∏Å‡πå

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${contentLength.description}
**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${contentLength.wordCount} ‡∏à‡∏£‡∏¥‡∏á‡πÜ**

‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${data.additional_prompt || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}

üéØ **‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î:**

1. **Keywords Usage - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î:**
${data.keywords_links.map(item => `   ‚Ä¢ "${item.keyword}" = ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö ${item.frequency} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢)`).join('\n')}

2. **Internal Links - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå:**
${data.keywords_links.map(item => `   ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå [${item.keyword}](${item.link}) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ "${item.keyword}" ‡πÄ‡∏õ‡πá‡∏ô anchor text`).join('\n')}

3. **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Internal Links:**
   - ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°](‡∏•‡∏¥‡∏á‡∏Å‡πå) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
   - ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô relative path ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ /
   - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: [${data.keywords_links[0]?.keyword || '‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç'}](${data.keywords_links[0]?.link || '/example'})
   - ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà domain ‡∏´‡∏£‡∏∑‡∏≠ URL ‡πÄ‡∏ï‡πá‡∏°

üìù **‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**

1. **Meta Title** (50-60 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£) - ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏•‡∏±‡∏Å

2. **Meta Description** (150-160 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£) - ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏•‡∏±‡∏Å

3. **H1 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å** - ‡πÉ‡∏ä‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: "${data.page_title}"

4. **‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å** ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
   - H2, H3 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢ (‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
   - ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ keywords ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î
   - Internal links ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
   - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢

5. **FAQ Section** - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°-‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö

6. **‡∏™‡∏£‡∏∏‡∏õ** - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏°‡∏µ internal links

‚úÖ **‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏≥:**
- ‡∏ô‡∏±‡∏ö keywords ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πä‡∏∞‡πÜ
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö internal links ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ${data.keywords_links.length} ‡∏•‡∏¥‡∏á‡∏Å‡πå
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö ${contentLength.wordCount}
- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Markdown ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î:**
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ keywords ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏°‡πâ‡πÅ‡∏ï‡πà 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
- ‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏° internal links ‡πÉ‡∏î‡πÜ
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ö‡∏ö absolute URL
- ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î

üö® **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å:** ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ 100% ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ keywords ‡πÅ‡∏•‡∏∞ internal links ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏`;
      } else {
        // Retry attempts - fix specific issues
        const prevAnalysis = await analyzeContent(currentContent, data.keywords_links);
        const issues = identifyIssues(prevAnalysis, data.keywords_links);
        
        userPrompt = `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î Keywords ‡πÅ‡∏•‡∏∞ Internal Links ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î:

**üö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏°:**
${issues.join('\n')}

**üìã ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:**
${keywordsLinksText}

**‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**
${currentContent}

**‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**
1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô keywords ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πä‡∏∞‡πÜ
2. ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç internal links ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
3. ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
4. ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Markdown ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

**üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:**
${data.keywords_links.map(item => `‚Ä¢ "${item.keyword}" = ${item.frequency} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô + ‡∏•‡∏¥‡∏á‡∏Å‡πå ${item.link}`).join('\n')}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å`;
      }

      const maxTokens = contentLength.tokens;

      const requestBody = {
        model: model,
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user", 
            content: userPrompt
          }
        ],
        temperature: attempts === 1 ? 0.7 : 0.3, // Lower temperature for corrections
        max_tokens: maxTokens,
        top_p: 0.9,
        frequency_penalty: 0.1,
        presence_penalty: 0.1
      };

      console.log('Making request to OpenRouter...');
      console.log('Max tokens:', maxTokens);
      console.log('Content length target:', contentLength.wordCount);
      console.log('üìã Keywords & Links Summary:');
      data.keywords_links.forEach((item, index) => {
        console.log(`  ${index + 1}. "${item.keyword}" (${item.frequency}x) -> ${item.link}`);
      });
      console.log(`üìä Total keyword usage required: ${totalKeywordUsage} times`);
      console.log(`üîó Total internal links required: ${data.keywords_links.length} links`);
      
      const response = await axios.post<OpenRouterResponse>(OPENROUTER_API_URL, requestBody, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
          'HTTP-Referer': process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',
          'X-Title': 'SEO Onpage Generator'
        },
        timeout: 180000, // 3 minutes for longer content
      });

      console.log('OpenRouter response received successfully');

      // Check if we have a valid response
      if (!response.data.choices || 
          !response.data.choices[0] || 
          !response.data.choices[0].message || 
          !response.data.choices[0].message.content) {
        console.error('Invalid response structure from OpenRouter');
        return {
          success: false,
          message: 'Invalid response from OpenRouter'
        };
      }

      currentContent = response.data.choices[0].message.content;
      
      // Count words in content (approximate)
      const wordCount = currentContent.split(/\s+/).length;
      console.log('Generated content word count:', wordCount);

      // Analyze keywords and internal links usage
      console.log('üîç Analyzing generated content...');
      validationResult = await analyzeContent(currentContent, data.keywords_links);

      // Check if content meets requirements
      const isValid = validateContent(validationResult, data.keywords_links);
      
      if (isValid) {
        console.log('‚úÖ Content validation passed - all requirements met!');
        break;
      } else {
        console.log('‚ùå Content validation failed - retrying...');
        const issues = identifyIssues(validationResult, data.keywords_links);
        console.log('Issues found:', issues);
        
        if (attempts === maxAttempts) {
          console.log('‚ö†Ô∏è Max attempts reached, using best available content');
        }
      }
    }

    const wordCount = currentContent.split(/\s+/).length;
    
    // Ensure validationResult is not undefined
    if (!validationResult) {
      validationResult = await analyzeContent(currentContent, data.keywords_links);
    }
    
    // Log final analysis results
    console.log('üìä Final Keywords Analysis:');
    validationResult.keywordAnalysis.forEach(analysis => {
      const status = analysis.actual === analysis.expected ? '‚úÖ' : '‚ö†Ô∏è';
      console.log(`  ${status} "${analysis.keyword}": ${analysis.actual}/${analysis.expected} times`);
      console.log(`  üîó Link "${analysis.link}": ${analysis.linkFound ? '‚úÖ Found' : '‚ùå Missing'}`);
    });

    const totalExpected = data.keywords_links.reduce((sum, item) => sum + item.frequency, 0);
    const totalActual = validationResult.keywordAnalysis.reduce((sum, item) => sum + item.actual, 0);
    const linksExpected = data.keywords_links.length;
    const linksFound = validationResult.keywordAnalysis.filter(item => item.linkFound).length;

    console.log(`üìà Final Summary: Keywords ${totalActual}/${totalExpected}, Links ${linksFound}/${linksExpected}`);

    // Create detailed message with analysis
    let analysisMessage = `‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${wordCount} ‡∏Ñ‡∏≥) - ‡πÉ‡∏ä‡πâ ${attempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á`;
    
    if (totalActual !== totalExpected || linksFound !== linksExpected) {
      analysisMessage += `\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: Keywords ${totalActual}/${totalExpected}, Links ${linksFound}/${linksExpected}`;
    } else {
      analysisMessage += `\n‚úÖ Keywords ‡πÅ‡∏•‡∏∞ Internal Links ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`;
    }

    return {
      success: true,
      message: analysisMessage,
      content: currentContent,
      original_data: data,
      analysis: {
        wordCount,
        keywordAnalysis: validationResult.keywordAnalysis,
        summary: {
          totalExpected,
          totalActual,
          linksExpected,
          linksFound
        },
        attempts
      }
    };

  } catch (error) {
    console.error('OpenRouter API Error Details:', error);
    
    if (axios.isAxiosError(error)) {
      console.error('Response status:', error.response?.status);
      console.error('Response data:', error.response?.data);
      
      if (error.response?.status === 401) {
        return {
          success: false,
          message: 'OpenRouter API authentication failed. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Settings'
        };
      }
      
      if (error.response?.status === 403) {
        return {
          success: false,
          message: 'OpenRouter API access forbidden. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå API Key'
        };
      }
      
      const errorMessage = error.response?.data?.error?.message || 
                          error.response?.data?.message || 
                          error.message;
      return {
        success: false,
        message: `OpenRouter API Error: ${errorMessage}`
      };
    }

    return {
      success: false,
      message: 'Failed to generate content from OpenRouter API'
    };
  }
}

// Helper function to analyze content
async function analyzeContent(content: string, keywordsLinks: any[]) {
  const keywordAnalysis = keywordsLinks.map(item => {
    // Count keyword occurrences (case insensitive)
    const regex = new RegExp(item.keyword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
    const matches = content.match(regex) || [];
    const actualCount = matches.length;
    
    // Check for internal links
    const linkRegex = new RegExp(`\\[([^\\]]*(?:${item.keyword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}[^\\]]*)?)\\]\\(${item.link.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\)`, 'gi');
    const linkMatches = content.match(linkRegex) || [];
    
    return {
      keyword: item.keyword,
      expected: item.frequency,
      actual: actualCount,
      link: item.link,
      linkFound: linkMatches.length > 0,
      linkMatches: linkMatches
    };
  });

  return { keywordAnalysis };
}

// Helper function to validate content
function validateContent(analysis: any, keywordsLinks: any[]): boolean {
  for (const item of analysis.keywordAnalysis) {
    if (item.actual !== item.expected || !item.linkFound) {
      return false;
    }
  }
  return true;
}

// Helper function to identify specific issues
function identifyIssues(analysis: any, keywordsLinks: any[]): string[] {
  const issues: string[] = [];
  
  analysis.keywordAnalysis.forEach((item: any) => {
    if (item.actual !== item.expected) {
      if (item.actual > item.expected) {
        issues.push(`üî¥ "${item.keyword}": ‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ${item.actual}/${item.expected} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏•‡∏î‡∏•‡∏á ${item.actual - item.expected} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)`);
      } else {
        issues.push(`üî¥ "${item.keyword}": ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ${item.actual}/${item.expected} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏° ${item.expected - item.actual} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)`);
      }
    }
    
    if (!item.linkFound) {
      issues.push(`üîó ‡∏Ç‡∏≤‡∏î Internal Link: [${item.keyword}](${item.link})`);
    }
  });
  
  return issues;
} 